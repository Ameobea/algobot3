"use strict";
/*jslint node: true */
/*jslint browser: true*/ /*global Highcharts, $*/
var mainGraph;
var momentumGraph;
var smaDistGraph;
var buttonHTML;
var oldHTML;
var lastHTML;

//TODO: Add in live updating.

var getData = function(pair, type, props, range, callback){
  $.post("http://<%= ip %>" + "api/data/" + pair + "/" + type + "/" + range, {props: JSON.stringify(props)}, function(res){
    callback(JSON.parse(res));
  });
};

var resetAndUpdate = function(range, callback){
  clearChart(mainGraph);

  var pair = $("#pairInput").val();
  var loadTicks = $("#loadTicks").is(":checked");
  
  var averages = [];
  var averageBoxes = [].slice.call($(".averageInput"));
  averageBoxes.forEach(function(box){
    averages.push(box.value);
  });
  var momentums = [];
  var momentumBoxes = [].slice.call($(".momentumInput"));
  momentumBoxes.forEach(function(box){
    if(box.value !== ""){
      momentums.push(box.value);
    }
  });

  var tickData = {type: "ticks", data: []};
  var priceData = {type: "prices", data: []};
  var averageData = {type: "smas", data: []};
  var momentumData = {type: "momentums", data: []};

  if(loadTicks){
    tickData.data.push(
      new Promise(function(fulfill, reject){
        getData(pair, "ticks", {}, range, function(tickData){
          fulfill(tickData);
        });
      })
    );
  }

  priceData.data.push(
    new Promise(function(fulfill, reject){
      getData(pair, "prices", {}, range, function(priceData){
        fulfill(priceData);
      });
    })
  );

  averages.forEach(function(period){
    averageData.data.push(
      new Promise(function(fulfill, reject){
        getData(pair, "smas", {period: parseInt(period)}, range, function(smaData){
          fulfill(smaData);
        });
      })
    );
  });

  momentums.forEach(function(params){
    params = params.split(",");
    momentumData.data.push(
      new Promise(function(fulfill, reject){
        getData(pair, "momentums", {averagePeriod: parseInt(params[0]), momentumPeriod: parseInt(params[1])}, range, function(momentumData){
          fulfill(momentumData);
        });
      })
    );
  });

  var toPromisify = [priceData, averageData, momentumData];
  if(loadTicks){
    toPromisify.push(tickData);
  }
  var finalPromiseArray = [];

  toPromisify.forEach(function(promiseObject){
    finalPromiseArray.push(
      new Promise(function(fulfill, reject){
        Promise.all(promiseObject.data).then(function(values){// evalulate one of the three promise arrays
          fulfill(values);
        });
      })
    );
  });

  //TODO: Reduce number of points that are plotted to make it easier on client cpu
  drawSeries(finalPromiseArray).then(function(){
    var stripePeriod = parseInt($("#maxMinStripePeriod").val());

    var compUpPeriods = $("#compUpPeriods").val();
    var compDnPeriods = $("#compDownPeriods").val();
    compUpPeriods = compUpPeriods.split(",");
    compDnPeriods = compDnPeriods.split(",");

    var realCompUpPeriods = [];
    var realCompDnPeriods = [];

    compUpPeriods.forEach(function(pd2){
      realCompUpPeriods.push(parseInt(pd2));
    });
    compDnPeriods.forEach(function(pd2){
      realCompDnPeriods.push(parseInt(pd2));
    });

    var drawDownBands = $("#drawDownBands").is(":checked");
    var drawUpBands =   $("#drawUpBands").is(":checked");

    drawCrossBands(pair, range, stripePeriod, realCompUpPeriods, realCompDnPeriods, drawDownBands, drawUpBands);

    var smaDistPeriod     = $("#smaDistInput").val();
    var smaDistCompPeriod = $(".smaDistCompInput").val().split(",").map(function(x){return parseInt(x);});

    drawSMADistGraph(pair, range, smaDistPeriod, smaDistCompPeriod);

    drawTrades(pair, range);
  });
};

var drawTrades = function(pair, range){
  var params = {pair: pair};

  getData(pair, "tradeHistory", params, range, function(tradeData){
    var filtered = tradeData.filter(function(trade){
      return trade.pair == pair;
    });
    tradeIterator(filtered);
  });
}

var tradeIterator = function(trades){
  if(trades.length > 0){
    var tradeStart = trades[0];
    trades.shift();

    if(trades.length > 0){
      var tradeStop = trades[0];
      trades.shift();
      drawTradeLine(tradeStart.timestamp, tradeStop.timestamp, tradeStart.openPrice, tradeStop.closePrice, tradeStart.direction);

      tradeIterator(trades);
    }else{
      //TODO: draw trade line to current price
    }
  }
}

var drawTradeLine = function(startTime, stopTime, startPrice, stopPrice, direction){
  var color;
  if(direction){
    color = "blue";
  }else{
    color = "red";
  }

  var series = {yAxis: "priceAverageAxis", showInLegend: false, type: "line", color: color};
  series.data = [[startTime * 1000, startPrice], [stopTime * 1000, stopPrice]];

  mainGraph.addSeries(series);
}

var drawSMADistGraph = function(pair, range, distPeriod, distCompPeriods){
  var params = {pair: pair, maPeriod: parseInt(distPeriod), $or: []};

  distCompPeriods.forEach(function(compPeriod){
    params.$or.push({compPeriod: compPeriod});
  });

  getData(pair, "smaDists", params, range, function(distData){

    if(distData.length > 0){
      distCompPeriods.forEach(function(compPeriod){
        var dataSeries = {data: [], yAxis: "distAxis", name: "Period " + distPeriod + "," + compPeriod + " Distance", type: "area"};
        
        distData.forEach(function(cross){
          if(cross.compPeriod == compPeriod){
            dataSeries.data.push([cross.timestamp * 1000, cross.diff]);
          }
        });

        smaDistGraph.addSeries(dataSeries);
      });
    }
  });
};

var mapColors = function(compPeriods){
  var colorArray = [{}, {}];

  compPeriods.forEach(function(compPeriod, index){
    var lightness = 100-(((index + 1)/compPeriods.length)*50);
    colorArray[0][compPeriod.toString()] = "hsl(360, 100%, " + lightness.toString() + "%)";
  });

  compPeriods.forEach(function(compPeriod, index){
    var lightness = 100-(((index + 1)/compPeriods.length)*50);
    colorArray[1][compPeriod.toString()] = "hsl(240, 100%, " + lightness.toString() + "%)";
  });

  return colorArray;
};

var drawCrossBands = function(pair, range, stripePeriod, compUpPeriods, compDownPeriods, drawDownBands, drawUpBands){
  //TODO: Make it so that you can draw up bands for one compPeriod and down bands for a different compPeriod
  //TODO: See if you can make them transluscent or something better than using zindexes
  var params = {period: stripePeriod, $or: []};

  compUpPeriods.forEach(function(pd){
    params.$or.push({compPeriod: pd});
  });

  compDownPeriods.forEach(function(pd){
    params.$or.push({compPeriod: pd});
  });

  getData(pair, "smaCrosses", params, range, function(crossData){
    if(crossData.length > 0){
      var includedCompPeriods = [];

      crossData.forEach(function(cross){
        if(includedCompPeriods.indexOf(cross.compPeriod) == -1){
          includedCompPeriods.push(cross.compPeriod);
        }
      });

      includedCompPeriods.sort().reverse();
      var colorsMap = mapColors(includedCompPeriods);

      crossData.forEach(function(cross, index){
        var pairIndex = false;

        for(var i=index+1;i<crossData.length;i++){
          if(crossData[i].compPeriod == cross.compPeriod){
            pairIndex = i;
            break;
          }
        }

        if(pairIndex && cross.period == stripePeriod && index < crossData.length-1){
          if(cross.direction && drawUpBands && compUpPeriods.indexOf(cross.compPeriod) != -1){//it's a cross up
            mainGraph.xAxis[0].addPlotBand({
              from: cross.timestamp * 1000,
              to: crossData[pairIndex].timestamp * 1000,
              color: colorsMap[1][cross.compPeriod.toString()],
              id: "band",
              zIndex: -1*cross.compPeriod
            });
          }else if(!cross.direction && drawDownBands && compDownPeriods.indexOf(cross.compPeriod) != -1){//it's a cross down
            mainGraph.xAxis[0].addPlotBand({
              from: cross.timestamp * 1000,
              to: crossData[pairIndex].timestamp * 1000,
              color: colorsMap[0][cross.compPeriod.toString()],
              id: "band",
              zIndex: -1*cross.compPeriod
            });
          }
        }
      });
    }
  });
};

var drawSeries = function(finalPromiseArray_){
  return Promise.all(finalPromiseArray_).then(function(finalValues){ //prices, smas, momentums

    finalValues[0].forEach(function(priceArray){
      var priceSeries = {data: [], yAxis: "priceAverageAxis", name: "Price"};
      priceArray.forEach(function(price){
        priceSeries.data.push([price.timestamp * 1000, price.price]);
      });
      mainGraph.addSeries(priceSeries);
    });

      finalValues[1].forEach(function(smaArray){
        if(smaArray.length > 0){
          var smaSeries = {data: [], yAxis: "priceAverageAxis", name: "Period " + smaArray[0].period + " Average"};
          smaArray.forEach(function(sma){
            smaSeries.data.push([sma.timestamp * 1000, sma.value]);
          });
          mainGraph.addSeries(smaSeries);
        }
      });

    finalValues[2].forEach(function(momentumArray){
      if(momentumArray.length > 0){
        var momentumSeries = {data: [], yAxis: "momentumAxis", name: "Period " + momentumArray[0].averagePeriod + "," + momentumArray[0].momentumPeriod + " Momentum", type: "area"};
        momentumArray.forEach(function(momentum){
          momentumSeries.data.push([momentum.timestamp * 1000, momentum.momentum]);
        });
        momentumGraph.addSeries(momentumSeries);
      }
    });

    if(finalValues[3]){
      finalValues[3].forEach(function(tickArray){
        if(tickArray.length > 0){
          var tickBidSeries = {data: [], yAxies: "priceAverageAxis", name: "Raw Bids"};
          var tickAskSeries = {data: [], yAxies: "priceAverageAxis", name: "Raw Asks"};
          tickArray.forEach(function(tick){
            tickBidSeries.data.push([tick.timestamp * 1000, tick.bid]);
            tickAskSeries.data.push([tick.timestamp * 1000, tick.ask]);
          });
          mainGraph.addSeries(tickBidSeries);
          mainGraph.addSeries(tickAskSeries);
        }
      });
    }
  });
};

var clearChart = function(chart){
  while(mainGraph.series.length > 0)
    mainGraph.series[0].remove(true);
  while(momentumGraph.series.length > 0)
    momentumGraph.series[0].remove(true);
  while(smaDistGraph.series.length > 0)
    smaDistGraph.series[0].remove(true);
  mainGraph.xAxis[0].removePlotBand("band");
};

var setupConfigListeners = function(){
  $(".averageExtend").off().click(function(){
    buttonHTML = '<input type="button" class="averageRemove" value="Remove One"><input type="button" class="averageExtend" value="Add Another">';
    oldHTML = $("#averages").html().split(buttonHTML)[0];
    $("#averages").html(oldHTML + '<input type="text" class="averageInput"><br>\n' + buttonHTML);
    setupConfigListeners();
  });

  $(".averageRemove").off().click(function(){
    buttonHTML = '<input type="button" class="averageRemove" value="Remove One"><input type="button" class="averageExtend" value="Add Another">';
    lastHTML = '<input type="text" class="averageInput"><br>\n' + buttonHTML;
    oldHTML = $("#averages").html().split(lastHTML)[0];
    $("#averages").html(oldHTML + buttonHTML);
    setupConfigListeners();
  });

  $(".momentumExtend").off().click(function(){
    buttonHTML = '<input type="button" class="momentumRemove" value="Remove One"><input type="button" class="momentumExtend" value="Add Another">';
    oldHTML = $("#momentums").html().split(buttonHTML)[0];
    $("#momentums").html(oldHTML + '<input type="text" class="momentumInput"><br>\n' + buttonHTML);
    setupConfigListeners();
  });

  $(".momentumRemove").off().click(function(){
    var buttonHTML = '<input type="button" class="momentumRemove" value="Remove One"><input type="button" class="momentumExtend" value="Add Another">';
    var lastHTML = '<input type="text" class="momentumInput"><br>\n' + buttonHTML;
    var oldHTML = $("#momentums").html().split(lastHTML)[0];
    $("#momentums").html(oldHTML + buttonHTML);
    setupConfigListeners();
  });

  $(".smaDistCompExtend").off().click(function(){
    var buttonHTML = '<input type="button" class="smaDistCompRemove" value="Remove One"><input type="button" class="smaDistCompExtend" value="Add Another">';
    var lastHTML = '<input type="text" class="smaDistCompInput"><br>\n' + buttonHTML;
    var oldHTML = $("#momentums").html().split(lastHTML)[0];
    $("#momentums").html(oldHTML + buttonHTML);
    setupConfigListeners();
  });

  $(".smaDistCompRemove").off().click(function(){
    var buttonHTML = '<input type="button" class="smaDistCompRemove" value="Remove One"><input type="button" class="smaDistCompExtend" value="Add Another">';
    var lastHTML = '<input type="text" class="smaDistCompInput"><br>\n' + buttonHTML;
    var oldHTML = $("#momentums").html().split(lastHTML)[0];
    $("#momentums").html(oldHTML + buttonHTML);
    setupConfigListeners();
  });

  $("#update").off().click(function(){
    resetAndUpdate(parseInt($("#timeRange").val()));
  });
};

$(document).ready(function(){
  mainGraph = new Highcharts.Chart({
    chart: {
      renderTo: 'mainGraph',
      zoomType: "x"
    },
    title: {
      text: 'Main Chart'
    },
    xAxis: {
      type: 'datetime',
      tickPixelInterval: 150,
      maxZoom: 20 * 1000
    },
    plotOptions: {
      series: {
        animation: false
      }
    },
    yAxis: {
      id: "priceAverageAxis",
      minPadding: 0.2,
      maxPadding: 0.2,
      title: {
        text: 'Price',
        margin: 80
      }
    },
    series: [{
      name: 'Average Rate of Change',
      data: []
    }]
  });

  momentumGraph = new Highcharts.Chart({ //TODO: Change colors to varying shades of red/green if it's above/below 0
    chart: {
      renderTo: 'momentumGraph',
      zoomType: "x"
    },
    title: {
      text: 'Momentum Chart'
    },
    xAxis: {
      type: 'datetime',
      tickPixelInterval: 150,
      maxZoom: 20 * 1000
    },
    plotOptions: {
      series: {
        animation: false
      }
    },
    yAxis: {
      id: "momentumAxis",
      title: {
        text: "Momentum",
        margin: 80
      }
    },
    series: [{
      name: 'Average Rate of Change',
      data: []
    }]
  });

  smaDistGraph = new Highcharts.Chart({ //TODO: Change colors to varying shades of red/green if it's above/below 0
    chart: {
      renderTo: 'smaDistGraph',
      zoomType: "x"
    },
    title: {
      text: 'SMA Distances Chart'
    },
    xAxis: {
      type: 'datetime',
      tickPixelInterval: 150,
      maxZoom: 20 * 1000
    },
    plotOptions: {
      series: {
        animation: false
      }
    },
    yAxis: {
      id: "distAxis",
      title: {
        text: "Distance",
        margin: 80
      }
    },
    series: [{
      name: 'SMA Distances',
      data: []
    }]
  });

  setupConfigListeners();
});
