"use strict";
/*jslint node: true */
/*jslint browser: true*/ /*global Highcharts, $*/
var mainGraph;
var momentumGraph;
var buttonHTML;
var oldHTML;
var lastHTML;

var socket = new WebSocket("ws://<%= websocketIp %>");

socket.onmessage = function(text){
  var parsed = JSON.parse(text.data);
  
};

var getData = function(pair, type, props, range, callback){
  $.post("http://<%= ip %>" + "api/data/" + pair + "/" + type + "/" + range, {props: JSON.stringify(props)}, function(res){
    callback(JSON.parse(res));
  });
};

var resetAndUpdate = function(range, callback){
  var pair = $("#pairInput").val();
  
  var averages = [];
  var averageBoxes = [].slice.call($(".averageInput"));
  averageBoxes.forEach(function(box){
    averages.push(box.value);
  });
  var momentums = [];
  var momentumBoxes = [].slice.call($(".momentumInput"));
  momentumBoxes.forEach(function(box){
    if(box.value != ""){
      momentums.push(box.value);
    }
  });

  var priceData = {type: "prices", data: []};
  var averageData = {type: "smas", data: []};
  var momentumData = {type: "momentums", data: []};

  priceData.data.push(
    new Promise(function(fulfill, reject){
      getData(pair, "prices", {}, range, function(priceData){
        fulfill(priceData);
      });
    })
  );

  averages.forEach(function(period){
    averageData.data.push(
      new Promise(function(fulfill, reject){
        getData(pair, "smas", {period: parseInt(period)}, range, function(smaData){
          fulfill(smaData);
        });
      })
    );
  });

  momentums.forEach(function(params){
    params = params.split(",");
    momentumData.data.push(
      new Promise(function(fulfill, reject){
        getData(pair, "momentums", {averagePeriod: parseInt(params[0]), momentumPeriod: parseInt(params[1])}, range, function(momentumData){
          fulfill(momentumData);
        });
      })
    );
  });

  var finalPromiseArray = [];
  [priceData, averageData, momentumData].forEach(function(promiseObject){
    finalPromiseArray.push(
      new Promise(function(fulfill, reject){
        Promise.all(promiseObject.data).then(function(values){// evalulate one of the three promise arrays
          fulfill(values);
        });
      })
    )
  });

  Promise.all(finalPromiseArray).then(function(finalValues){ //prices, smas, momentums
    console.log(finalValues);
    clearChart(mainGraph);

    finalValues[0].forEach(function(priceArray){
      var priceSeries = {data: [], yAxis: "priceAverageAxis", name: "Price"};
      priceArray.forEach(function(price){
        priceSeries.data.push([price.timestamp * 10000, price.price]);
      });
      mainGraph.addSeries(priceSeries);
    });

    finalValues[1].forEach(function(smaArray){
      var smaSeries = {data: [], yAxis: "priceAverageAxis", name: "Period " + smaArray[0].period + " Average"};
      smaArray.forEach(function(sma){
        smaSeries.data.push([sma.timestamp * 10000, sma.value]);
      });
      mainGraph.addSeries(smaSeries);
    });

    finalValues[2].forEach(function(momentumArray){
      var momentumSeries = {data: [], yAxis: "momentumAxis", name: "Period " + momentumArray[0].averagePeriod + "," + momentumArray[0].momentumPeriod + " Momentum", type: "area"};
      momentumArray.forEach(function(momentum){
        momentumSeries.data.push([momentum.timestamp * 10000, momentum.momentum]);
      });
      momentumGraph.addSeries(momentumSeries);
    });
  });
};

var clearChart = function(chart){
  while(mainGraph.series.length > 0)
    mainGraph.series[0].remove(true);
  while(momentumGraph.series.length > 0)
    momentumGraph.series[0].remove(true);
};

var setupConfigListeners = function(){
  $("#averageExtend").off().click(function(){
    buttonHTML = '<input type="button" id="averageRemove" value="Remove One"><input type="button" id="averageExtend" value="Add Another">';
    oldHTML = $("#averages").html().split(buttonHTML)[0];
    $("#averages").html(oldHTML + '<input type="text" class="averageInput"><br>\n' + buttonHTML);
    setupConfigListeners();
  });

  $("#averageRemove").off().click(function(){
    buttonHTML = '<input type="button" id="averageRemove" value="Remove One"><input type="button" id="averageExtend" value="Add Another">';
    lastHTML = '<input type="text" class="averageInput"><br>\n' + buttonHTML;
    oldHTML = $("#averages").html().split(lastHTML)[0];
    $("#averages").html(oldHTML + buttonHTML);
    setupConfigListeners();
  });

  $("#momentumExtend").off().click(function(){
    buttonHTML = '<input type="button" id="momentumRemove" value="Remove One"><input type="button" id="momentumExtend" value="Add Another">';
    oldHTML = $("#momentums").html().split(buttonHTML)[0];
    $("#momentums").html(oldHTML + '<input type="text" class="momentumInput"><br>\n' + buttonHTML);
    setupConfigListeners();
  });

  $("#momentumRemove").off().click(function(){
    var buttonHTML = '<input type="button" id="momentumRemove" value="Remove One"><input type="button" id="momentumExtend" value="Add Another">';
    var lastHTML = '<input type="text" class="momentumInput"><br>\n' + buttonHTML;
    var oldHTML = $("#momentums").html().split(lastHTML)[0];
    $("#momentums").html(oldHTML + buttonHTML);
    setupConfigListeners();
  });

  $("#update").off().click(function(){
    resetAndUpdate(parseInt($("#timeRange").val()));
  });
};

$(document).ready(function(){
  mainGraph = new Highcharts.Chart({
    chart: {
      renderTo: 'mainGraph',
      zoomType: "x"
    },
    title: {
      text: 'Main Chart'
    },
    xAxis: {
      type: 'datetime',
      tickPixelInterval: 150,
      maxZoom: 20 * 1000
    },
    plotOptions: {
      series: {
        animation: false
      }
    },
    yAxis: {
      id: "priceAverageAxis",
      minPadding: 0.2,
      maxPadding: 0.2,
      title: {
        text: 'Price',
        margin: 80
      }
    },
    series: [{
      name: 'Average Rate of Change',
      data: []
    }]
  });

  momentumGraph = new Highcharts.Chart({ //TODO: Change colors to varying shades of red/green if it's above/below 0
    chart: {
      renderTo: 'momentumGraph',
      zoomType: "x"
    },
    title: {
      text: 'Momentum Chart'
    },
    xAxis: {
      type: 'datetime',
      tickPixelInterval: 150,
      maxZoom: 20 * 1000
    },
    plotOptions: {
      series: {
        animation: false
      }
    },
    yAxis: {
      id: "momentumAxis",
      title: {
        text: "Momentum",
        margin: 80
      }
    },
    series: [{
      name: 'Average Rate of Change',
      data: []
    }]
  });

  setupConfigListeners();
});
